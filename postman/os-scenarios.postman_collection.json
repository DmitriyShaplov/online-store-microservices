{
	"info": {
		"_postman_id": "90c2004e-02f5-4e63-9925-654cb6244290",
		"name": "OTUS Online Store Scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9271200"
	},
	"item": [
		{
			"name": "Scenario #1 Product Reservation Failed",
			"item": [
				{
					"name": "upload product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"product_id\", pm.response.json().id);\r",
									"pm.environment.set(\"product_price\", pm.response.json().price);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"name\": \"{{$randomProduct}} {{$randomProductMaterial}} {{$guid}}\",\r\n    \"price\": {{$randomPrice}},\r\n    \"quantity\": 100 \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "file",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "register user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    let result = \"\";",
									"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let charactersLength = characters.length;",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    return result;",
									"}",
									"function randomNumericString(length) {",
									"  var result = \"\";",
									"  for (var i = 0; i < length; i++) {",
									"    result += Math.floor(Math.random() * 10);",
									"  }",
									"  return result;",
									"}",
									"",
									"pm.variables.set(\"randomNumber\", randomNumericString(10));",
									"pm.environment.set(\"user1Login\", generateRandomString(8));",
									"pm.environment.set(\"user1Username\", generateRandomString(8));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User 1 registered\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");  ",
									"});",
									"pm.environment.set(\"profile_id\", pm.response.json().id);",
									"pm.environment.set(\"username1\", pm.response.json().username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\",\n    \"username\": \"{{user1Username}}\",\n    \"firstName\": \"firstName1\",\n    \"lastName\": \"lastName1\",\n    \"email\": \"testmail1@mail.ru\",\n    \"phone\": \"+{{randomNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/register",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.variables.get(\"user1Login\"));",
									"pm.test(\"User 1 logged in\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{product_id}}\",\r\n    \"quantity\": 101\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/cart",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order created\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"order_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentTimestamp = new Date();\r",
									"// Set the specified hour\r",
									"const daysToAdd = Math.floor(Math.random() * (28 - 1 + 1)) + 1;\r",
									"const hoursToSet = Math.floor(Math.random() * (21 - 10 + 1)) + 10;\r",
									"currentTimestamp.setDate(currentTimestamp.getDate() + daysToAdd);\r",
									"currentTimestamp.setUTCHours(hoursToSet, 0, 0, 0); \r",
									"pm.environment.set(\"delivery_date\", currentTimestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"shippingAddress\": \"{{$randomStreetAddress}}\",\r\n    \"deliveryDate\": \"{{delivery_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get product by uuid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r",
									"\r",
									"(async () => {\r",
									"    const delayTime = 5000; // Delay in milliseconds (5000 ms = 5 seconds)\r",
									"    await delay(delayTime);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product quantity\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.quantity).to.eql(100);\r",
									"    pm.expect(responseJson.reserved).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get my order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order CANCELLED\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.orderStatus).to.eq(\"CANCELLED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r",
									"\r",
									"(async () => {\r",
									"    const delayTime = 1500; // Delay in milliseconds (5000 ms = 5 seconds)\r",
									"    await delay(delayTime);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders/{{order_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.contains(\"Неудачное резервирование\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r",
									"\r",
									"(async () => {\r",
									"    const delayTime = 500; // Delay in milliseconds (5000 ms = 5 seconds)\r",
									"    await delay(delayTime);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/notifications/last",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"last"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenario #2 Payment Failed",
			"item": [
				{
					"name": "upload product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"product_id\", pm.response.json().id);\r",
									"pm.environment.set(\"product_price\", pm.response.json().price);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"name\": \"{{$randomProduct}} {{$randomProductMaterial}}\",\r\n    \"price\": {{$randomPrice}},\r\n    \"quantity\": 100 \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "file",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "register user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    let result = \"\";",
									"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let charactersLength = characters.length;",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    return result;",
									"}",
									"function randomNumericString(length) {",
									"  var result = \"\";",
									"  for (var i = 0; i < length; i++) {",
									"    result += Math.floor(Math.random() * 10);",
									"  }",
									"  return result;",
									"}",
									"",
									"pm.variables.set(\"randomNumber\", randomNumericString(10));",
									"pm.environment.set(\"user1Login\", generateRandomString(8));",
									"pm.environment.set(\"user1Username\", generateRandomString(8));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User 1 registered\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");  ",
									"});",
									"pm.environment.set(\"profile_id\", pm.response.json().id);",
									"pm.environment.set(\"username1\", pm.response.json().username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\",\n    \"username\": \"{{user1Username}}\",\n    \"firstName\": \"firstName1\",\n    \"lastName\": \"lastName1\",\n    \"email\": \"testmail1@mail.ru\",\n    \"phone\": \"+{{randomNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/register",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.variables.get(\"user1Login\"));",
									"pm.test(\"User 1 logged in\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{product_id}}\",\r\n    \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/cart",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order created\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"order_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentTimestamp = new Date();\r",
									"// Set the specified hour\r",
									"const daysToAdd = Math.floor(Math.random() * (28 - 1 + 1)) + 1;\r",
									"const hoursToSet = Math.floor(Math.random() * (21 - 10 + 1)) + 10;\r",
									"currentTimestamp.setDate(currentTimestamp.getDate() + daysToAdd);\r",
									"currentTimestamp.setUTCHours(hoursToSet, 0, 0, 0); \r",
									"pm.environment.set(\"delivery_date\", currentTimestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"shippingAddress\": \"{{$randomStreetAddress}}\",\r\n    \"deliveryDate\": \"{{delivery_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get product by uuid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r",
									"\r",
									"(async () => {\r",
									"    const delayTime = 5000; // Delay in milliseconds (5000 ms = 5 seconds)\r",
									"    await delay(delayTime);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product quantity\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.quantity).to.eql(100);\r",
									"    pm.expect(responseJson.reserved).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get my order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order CANCELLED\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.orderStatus).to.eq(\"CANCELLED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders/{{order_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Неудачная оплата\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.contains(\"Неудачная оплата, не хватает средств\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/notifications/last",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"last"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenario #3 Success Finished Order",
			"item": [
				{
					"name": "upload product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"product_id\", pm.response.json().id);\r",
									"pm.environment.set(\"product_price\", pm.response.json().price);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"name\": \"{{$randomProduct}} {{$randomProductMaterial}} {{$guid}}\",\r\n    \"price\": {{$randomPrice}},\r\n    \"quantity\": 100 \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "file",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "register user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    let result = \"\";",
									"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let charactersLength = characters.length;",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    return result;",
									"}",
									"function randomNumericString(length) {",
									"  var result = \"\";",
									"  for (var i = 0; i < length; i++) {",
									"    result += Math.floor(Math.random() * 10);",
									"  }",
									"  return result;",
									"}",
									"",
									"pm.variables.set(\"randomNumber\", randomNumericString(10));",
									"pm.environment.set(\"user1Login\", generateRandomString(8));",
									"pm.environment.set(\"user1Username\", generateRandomString(8));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User 1 registered\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");  ",
									"});",
									"pm.environment.set(\"profile_id\", pm.response.json().id);",
									"pm.environment.set(\"username1\", pm.response.json().username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\",\n    \"username\": \"{{user1Username}}\",\n    \"firstName\": \"firstName1\",\n    \"lastName\": \"lastName1\",\n    \"email\": \"testmail1@mail.ru\",\n    \"phone\": \"+{{randomNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/register",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.variables.get(\"user1Login\"));",
									"pm.test(\"User 1 logged in\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Top Up Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"balance\", 100000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$guid}}\",\r\n    \"amount\": {{balance}},\r\n    \"prefix\": \"1234\",\r\n    \"suffix\": \"4321\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/accounts/topup",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								"topup"
							]
						}
					},
					"response": []
				},
				{
					"name": "get current account (balance)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"balance increased\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.balance).to.eql(pm.environment.get(\"balance\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/accounts/current",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{product_id}}\",\r\n    \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/cart",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order created\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"order_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentTimestamp = new Date();\r",
									"// Set the specified hour\r",
									"const daysToAdd = Math.floor(Math.random() * (28 - 1 + 1)) + 1;\r",
									"const hoursToSet = Math.floor(Math.random() * (21 - 10 + 1)) + 10;\r",
									"currentTimestamp.setDate(currentTimestamp.getDate() + daysToAdd);\r",
									"currentTimestamp.setUTCHours(hoursToSet, 0, 0, 0); \r",
									"pm.environment.set(\"delivery_date\", currentTimestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"shippingAddress\": \"{{$randomStreetAddress}}\",\r\n    \"deliveryDate\": \"{{delivery_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get product by uuid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r",
									"\r",
									"(async () => {\r",
									"    const delayTime = 6000; // Delay in milliseconds (5000 ms = 5 seconds)\r",
									"    await delay(delayTime);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product quantity\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.quantity).to.eql(90);\r",
									"    pm.expect(responseJson.reserved).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get my order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order IN_DELIVERY\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.orderStatus).to.eq(\"IN_DELIVERY\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders/{{order_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.contains(\"был создан\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/notifications/last",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "Finish delivery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/delivery/{{order_id}}/finish",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"delivery",
								"{{order_id}}",
								"finish"
							]
						}
					},
					"response": []
				},
				{
					"name": "get current account (balance) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"balance changed\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.balance).to.eql(pm.environment.get(\"balance\") - pm.environment.get(\"product_price\") * 10);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/accounts/current",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "get product by uuid Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r",
									"\r",
									"(async () => {\r",
									"    const delayTime = 1000; // Delay in milliseconds (5000 ms = 5 seconds)\r",
									"    await delay(delayTime);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product quantity\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.quantity).to.eql(90);\r",
									"    pm.expect(responseJson.reserved).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get my order Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order FINISHED\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.orderStatus).to.eq(\"FINISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders/{{order_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last notification Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.contains(\"успешно доставлен\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/notifications/last",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"last"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenario #4 Courier Slot Failed",
			"item": [
				{
					"name": "upload product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"product_id\", pm.response.json().id);\r",
									"pm.environment.set(\"product_price\", pm.response.json().price);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"name\": \"{{$randomProduct}} {{$randomProductMaterial}} {{$guid}}\",\r\n    \"price\": {{$randomPrice}},\r\n    \"quantity\": 100 \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "file",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "register user1 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    let result = \"\";",
									"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let charactersLength = characters.length;",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    return result;",
									"}",
									"function randomNumericString(length) {",
									"  var result = \"\";",
									"  for (var i = 0; i < length; i++) {",
									"    result += Math.floor(Math.random() * 10);",
									"  }",
									"  return result;",
									"}",
									"",
									"pm.variables.set(\"randomNumber\", randomNumericString(10));",
									"pm.environment.set(\"user1Login\", generateRandomString(8));",
									"pm.environment.set(\"user1Username\", generateRandomString(8));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User 1 registered\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");  ",
									"});",
									"pm.environment.set(\"profile_id\", pm.response.json().id);",
									"pm.environment.set(\"username1\", pm.response.json().username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\",\n    \"username\": \"{{user1Username}}\",\n    \"firstName\": \"firstName1\",\n    \"lastName\": \"lastName1\",\n    \"email\": \"testmail1@mail.ru\",\n    \"phone\": \"+{{randomNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/register",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.variables.get(\"user1Login\"));",
									"pm.test(\"User 1 logged in\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{user1Login}}\",\n    \"password\": \"secretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Top Up Balance Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"balance\", 100000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Balance ok\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$guid}}\",\r\n    \"amount\": {{balance}},\r\n    \"prefix\": \"1234\",\r\n    \"suffix\": \"4321\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/accounts/topup",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								"topup"
							]
						}
					},
					"response": []
				},
				{
					"name": "get current account (balance) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"balance increased\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.balance).to.eql(pm.environment.get(\"balance\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/accounts/current",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{product_id}}\",\r\n    \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/cart",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order created\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"order_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentTimestamp = new Date();\r",
									"// Set the specified hour\r",
									"const daysToAdd = Math.floor(Math.random() * (28 - 1 + 1)) + 1;\r",
									"const hoursToSet = Math.floor(Math.random() * (21 - 10 + 1)) + 10;\r",
									"currentTimestamp.setDate(currentTimestamp.getDate() + daysToAdd);\r",
									"currentTimestamp.setHours(hoursToSet, 0, 0, 0); \r",
									"pm.environment.set(\"delivery_date\", currentTimestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"shippingAddress\": \"{{$randomStreetAddress}}\",\r\n    \"deliveryDate\": \"{{delivery_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{product_id}}\",\r\n    \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/cart",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order created\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"order_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"shippingAddress\": \"{{$randomStreetAddress}}\",\r\n    \"deliveryDate\": \"{{delivery_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item Copy 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{product_id}}\",\r\n    \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/cart",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order created\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");  \r",
									"});\r",
									"pm.environment.set(\"order_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"shippingAddress\": \"{{$randomStreetAddress}}\",\r\n    \"deliveryDate\": \"{{delivery_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get product by uuid Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r",
									"\r",
									"(async () => {\r",
									"    const delayTime = 8000; // Delay in milliseconds (5000 ms = 5 seconds)\r",
									"    await delay(delayTime);\r",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product quantity\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.quantity).to.eql(80);\r",
									"    pm.expect(responseJson.reserved).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get my order Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"order CANCELLED\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.orderStatus).to.eq(\"CANCELLED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/orders/{{order_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last notification Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"product uploaded\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.contains(\"Не удалось найти курьера\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/notifications/last",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "get current account (balance) Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"balance unchanged\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    //не изменился, кроме того что списались деньги за 2 заказа\r",
									"    pm.expect(responseJson.balance).to.eql(pm.environment.get(\"balance\")\r",
									"    - pm.environment.get(\"product_price\") * 20);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/api/v1/accounts/current",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								"current"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}